// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" form:"name" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReq) Reset()         { *m = HelloReq{} }
func (m *HelloReq) String() string { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()    {}
func (*HelloReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *HelloReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReq.Merge(m, src)
}
func (m *HelloReq) XXX_Size() int {
	return m.Size()
}
func (m *HelloReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReq.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReq proto.InternalMessageInfo

type HelloResp struct {
	Content              string   `protobuf:"bytes,1,opt,name=Content,proto3" json:"content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResp) Reset()         { *m = HelloResp{} }
func (m *HelloResp) String() string { return proto.CompactTextString(m) }
func (*HelloResp) ProtoMessage()    {}
func (*HelloResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *HelloResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResp.Merge(m, src)
}
func (m *HelloResp) XXX_Size() int {
	return m.Size()
}
func (m *HelloResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResp.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResp proto.InternalMessageInfo

type UploadCarRecordResp struct {
	ResCode              int64    `protobuf:"varint,1,opt,name=ResCode,proto3" json:"resCode"`
	ResMsg               string   `protobuf:"bytes,2,opt,name=ResMsg,proto3" json:"resMsg"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadCarRecordResp) Reset()         { *m = UploadCarRecordResp{} }
func (m *UploadCarRecordResp) String() string { return proto.CompactTextString(m) }
func (*UploadCarRecordResp) ProtoMessage()    {}
func (*UploadCarRecordResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *UploadCarRecordResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadCarRecordResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadCarRecordResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadCarRecordResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadCarRecordResp.Merge(m, src)
}
func (m *UploadCarRecordResp) XXX_Size() int {
	return m.Size()
}
func (m *UploadCarRecordResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadCarRecordResp.DiscardUnknown(m)
}

var xxx_messageInfo_UploadCarRecordResp proto.InternalMessageInfo

type UploadCarRecordReq struct {
	CarCode              string   `protobuf:"bytes,1,opt,name=carCode,proto3" json:"carCode"`
	InTime               string   `protobuf:"bytes,2,opt,name=inTime,proto3" json:"inTime"`
	PassTime             string   `protobuf:"bytes,3,opt,name=passTime,proto3" json:"passTime"`
	ParkID               string   `protobuf:"bytes,4,opt,name=parkID,proto3" json:"parkID"`
	InOrOut              string   `protobuf:"bytes,5,opt,name=inOrOut,proto3" json:"inOrOut"`
	GUID                 string   `protobuf:"bytes,6,opt,name=GUID,proto3" json:"GUID"`
	ChannelID            string   `protobuf:"bytes,7,opt,name=channelID,proto3" json:"channelID"`
	ChannelName          string   `protobuf:"bytes,8,opt,name=channelName,proto3" json:"channelName"`
	ImagePath            string   `protobuf:"bytes,9,opt,name=imagePath,proto3" json:"imagePath"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadCarRecordReq) Reset()         { *m = UploadCarRecordReq{} }
func (m *UploadCarRecordReq) String() string { return proto.CompactTextString(m) }
func (*UploadCarRecordReq) ProtoMessage()    {}
func (*UploadCarRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *UploadCarRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UploadCarRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UploadCarRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UploadCarRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadCarRecordReq.Merge(m, src)
}
func (m *UploadCarRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *UploadCarRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadCarRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_UploadCarRecordReq proto.InternalMessageInfo

type GetCarRecordReq struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" form:"page" validate:"required"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty" form:"limit" validate:"required"`
	InTime               string   `protobuf:"bytes,3,opt,name=inTime,proto3" json:"inTime,omitempty" form:"inTime" `
	PassTime             string   `protobuf:"bytes,4,opt,name=passTime,proto3" json:"passTime,omitempty" form:"passTime" `
	CarCode              string   `protobuf:"bytes,5,opt,name=carCode,proto3" json:"carCode,omitempty" form:"carCode" `
	ParkID               string   `protobuf:"bytes,6,opt,name=parkID,proto3" json:"parkID,omitempty" form:"parkID"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCarRecordReq) Reset()         { *m = GetCarRecordReq{} }
func (m *GetCarRecordReq) String() string { return proto.CompactTextString(m) }
func (*GetCarRecordReq) ProtoMessage()    {}
func (*GetCarRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *GetCarRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCarRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCarRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCarRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCarRecordReq.Merge(m, src)
}
func (m *GetCarRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *GetCarRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCarRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCarRecordReq proto.InternalMessageInfo

type CarRecordInfo struct {
	CarCode              string   `protobuf:"bytes,1,opt,name=carCode,proto3" json:"carCode"`
	InTime               string   `protobuf:"bytes,2,opt,name=inTime,proto3" json:"inTime"`
	PassTime             string   `protobuf:"bytes,3,opt,name=passTime,proto3" json:"passTime"`
	ParkID               string   `protobuf:"bytes,4,opt,name=parkID,proto3" json:"parkID"`
	InOrOut              string   `protobuf:"bytes,5,opt,name=inOrOut,proto3" json:"inOrOut"`
	GUID                 string   `protobuf:"bytes,6,opt,name=GUID,proto3" json:"GUID"`
	ChannelID            string   `protobuf:"bytes,7,opt,name=channelID,proto3" json:"channelID"`
	ChannelName          string   `protobuf:"bytes,8,opt,name=channelName,proto3" json:"channelName"`
	ImagePath            string   `protobuf:"bytes,9,opt,name=imagePath,proto3" json:"imagePath"`
	Caruser              string   `protobuf:"bytes,10,opt,name=caruser,proto3" json:"caruser"`
	Stopaddr             string   `protobuf:"bytes,11,opt,name=stopaddr,proto3" json:"stopaddr"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CarRecordInfo) Reset()         { *m = CarRecordInfo{} }
func (m *CarRecordInfo) String() string { return proto.CompactTextString(m) }
func (*CarRecordInfo) ProtoMessage()    {}
func (*CarRecordInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *CarRecordInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CarRecordInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CarRecordInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CarRecordInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CarRecordInfo.Merge(m, src)
}
func (m *CarRecordInfo) XXX_Size() int {
	return m.Size()
}
func (m *CarRecordInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CarRecordInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CarRecordInfo proto.InternalMessageInfo

type CarRecordInfoList struct {
	List                 []*CarRecordInfo `protobuf:"bytes,1,rep,name=List,proto3" json:"list"`
	Total                int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CarRecordInfoList) Reset()         { *m = CarRecordInfoList{} }
func (m *CarRecordInfoList) String() string { return proto.CompactTextString(m) }
func (*CarRecordInfoList) ProtoMessage()    {}
func (*CarRecordInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *CarRecordInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CarRecordInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CarRecordInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CarRecordInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CarRecordInfoList.Merge(m, src)
}
func (m *CarRecordInfoList) XXX_Size() int {
	return m.Size()
}
func (m *CarRecordInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_CarRecordInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_CarRecordInfoList proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HelloReq)(nil), "demo.service.v1.HelloReq")
	proto.RegisterType((*HelloResp)(nil), "demo.service.v1.HelloResp")
	proto.RegisterType((*UploadCarRecordResp)(nil), "demo.service.v1.UploadCarRecordResp")
	proto.RegisterType((*UploadCarRecordReq)(nil), "demo.service.v1.UploadCarRecordReq")
	proto.RegisterType((*GetCarRecordReq)(nil), "demo.service.v1.GetCarRecordReq")
	proto.RegisterType((*CarRecordInfo)(nil), "demo.service.v1.CarRecordInfo")
	proto.RegisterType((*CarRecordInfoList)(nil), "demo.service.v1.CarRecordInfoList")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 818 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x4f, 0x6f, 0x23, 0x35,
	0x14, 0xdf, 0xfc, 0x69, 0x9b, 0x38, 0x5b, 0xca, 0x7a, 0xd1, 0x6a, 0x36, 0xac, 0xe2, 0xc1, 0x80,
	0x28, 0xa0, 0x4e, 0xd8, 0x22, 0xb1, 0x52, 0x05, 0x97, 0xb6, 0x68, 0xa9, 0xb4, 0xb0, 0x2b, 0x43,
	0x2f, 0x5c, 0xc0, 0x9d, 0x71, 0x26, 0xd6, 0xce, 0x8c, 0xa7, 0xb6, 0x53, 0xa9, 0x07, 0x2e, 0x7c,
	0x05, 0x2e, 0x7c, 0x1a, 0xce, 0x2b, 0x71, 0x41, 0xe2, 0x3e, 0x82, 0x82, 0x84, 0x94, 0x63, 0xbe,
	0x00, 0xc8, 0xf6, 0xfc, 0x49, 0xb6, 0xa4, 0x47, 0x4e, 0x5c, 0xe2, 0xe7, 0xdf, 0x7b, 0xbf, 0xf7,
	0x9e, 0xde, 0xef, 0x65, 0x0c, 0xfa, 0x34, 0xe7, 0x41, 0x2e, 0x85, 0x16, 0x70, 0x27, 0x62, 0xa9,
	0x08, 0x14, 0x93, 0x17, 0x3c, 0x64, 0xc1, 0xc5, 0xc3, 0xe1, 0x5e, 0xcc, 0xf5, 0x74, 0x76, 0x16,
	0x84, 0x22, 0x1d, 0xc7, 0x22, 0x16, 0x63, 0x1b, 0x77, 0x36, 0x9b, 0xd8, 0x9b, 0xbd, 0x58, 0xcb,
	0xf1, 0x87, 0xaf, 0xc7, 0x42, 0xc4, 0x09, 0x6b, 0xa2, 0x58, 0x9a, 0xeb, 0xcb, 0xd2, 0xf9, 0xa0,
	0x74, 0xd2, 0x9c, 0x8f, 0x69, 0x96, 0x09, 0x4d, 0x35, 0x17, 0x99, 0x72, 0x5e, 0x7c, 0x04, 0x7a,
	0x9f, 0xb1, 0x24, 0x11, 0x84, 0x9d, 0xc3, 0x47, 0xa0, 0x9b, 0xd1, 0x94, 0x79, 0x2d, 0xbf, 0xb5,
	0xdb, 0x3f, 0x7c, 0x73, 0x51, 0x20, 0x34, 0x11, 0x32, 0x3d, 0xc0, 0x06, 0xc5, 0xfe, 0x05, 0x4d,
	0x78, 0x44, 0x35, 0x3b, 0xc0, 0x92, 0x9d, 0xcf, 0xb8, 0x64, 0x11, 0x26, 0x96, 0x80, 0xf7, 0x41,
	0xbf, 0x4c, 0xa2, 0x72, 0xf8, 0x36, 0xd8, 0x3a, 0x12, 0x99, 0x66, 0x99, 0x2e, 0x13, 0x0d, 0xe6,
	0x05, 0xda, 0x0a, 0x1d, 0x44, 0x2a, 0x1f, 0xfe, 0x16, 0xdc, 0x3d, 0xcd, 0x13, 0x41, 0xa3, 0x23,
	0x2a, 0x09, 0x0b, 0x85, 0x8c, 0x2a, 0x36, 0x61, 0xea, 0x48, 0x44, 0xae, 0x8d, 0x8e, 0x63, 0x4b,
	0x07, 0x91, 0xca, 0x07, 0x31, 0xd8, 0x24, 0x4c, 0x7d, 0xae, 0x62, 0xaf, 0x6d, 0x6b, 0x80, 0x79,
	0x81, 0x36, 0xa5, 0x45, 0x48, 0xe9, 0xc1, 0x7f, 0xb7, 0x01, 0xbc, 0x56, 0xe2, 0xdc, 0x54, 0x08,
	0xa9, 0xac, 0x2b, 0x54, 0xfd, 0x39, 0x88, 0x54, 0x86, 0xa9, 0xc0, 0xb3, 0xaf, 0x78, 0xca, 0x96,
	0x2b, 0x38, 0x84, 0x94, 0x27, 0xdc, 0x05, 0xbd, 0x9c, 0x2a, 0x65, 0xa3, 0x3a, 0x36, 0xea, 0xf6,
	0xbc, 0x40, 0x35, 0x46, 0x6a, 0xcb, 0x64, 0xcb, 0xa9, 0x7c, 0x7e, 0x72, 0xec, 0x75, 0x9b, 0x6c,
	0x0e, 0x21, 0xe5, 0x69, 0x1a, 0xe3, 0xd9, 0x53, 0xf9, 0x74, 0xa6, 0xbd, 0x8d, 0xa6, 0xb1, 0x12,
	0x22, 0x95, 0x01, 0x1f, 0x80, 0xee, 0xe3, 0xd3, 0x93, 0x63, 0x6f, 0xd3, 0xc6, 0xf4, 0xe6, 0x05,
	0xb2, 0x77, 0x62, 0x7f, 0xe1, 0xfb, 0xa0, 0x1f, 0x4e, 0x69, 0x96, 0xb1, 0xe4, 0xe4, 0xd8, 0xdb,
	0xb2, 0x21, 0xdb, 0xf3, 0x02, 0x35, 0x20, 0x69, 0x4c, 0xf8, 0x10, 0x0c, 0xca, 0xcb, 0x17, 0x46,
	0xf7, 0x9e, 0x0d, 0xdf, 0x99, 0x17, 0x68, 0x19, 0x26, 0xcb, 0x17, 0x93, 0x9f, 0xa7, 0x34, 0x66,
	0xcf, 0xa8, 0x9e, 0x7a, 0xfd, 0x26, 0x7f, 0x0d, 0x92, 0xc6, 0xc4, 0x3f, 0xb5, 0xc1, 0xce, 0x63,
	0xa6, 0x57, 0xc6, 0xff, 0x08, 0x74, 0x73, 0x1a, 0x57, 0xea, 0x2e, 0x2d, 0x99, 0x41, 0xd7, 0x2c,
	0x99, 0x71, 0xc1, 0x03, 0xb0, 0x91, 0xf0, 0x94, 0x6b, 0xab, 0x47, 0xe7, 0xf0, 0xad, 0x45, 0x81,
	0x7c, 0xc7, 0xb4, 0xf0, 0xbf, 0x53, 0x1d, 0x05, 0xbe, 0x57, 0x8b, 0xe9, 0x64, 0x82, 0x8b, 0x02,
	0xbd, 0xe2, 0xc8, 0x0e, 0xc7, 0x7e, 0x2d, 0xea, 0x07, 0x4b, 0xa2, 0x3a, 0xb1, 0x5e, 0x5b, 0x14,
	0xe8, 0xd5, 0xaa, 0x49, 0xe7, 0xc1, 0xfe, 0x92, 0xb8, 0x7b, 0xcd, 0x46, 0x39, 0xe1, 0xee, 0x2e,
	0x0a, 0xb4, 0xe3, 0x08, 0xa5, 0x03, 0xfb, 0xcd, 0x66, 0xbd, 0x5b, 0xef, 0x82, 0x93, 0xf0, 0xce,
	0xa2, 0x40, 0xdb, 0x55, 0x7a, 0x83, 0xe3, 0x6a, 0x25, 0xf0, 0xcf, 0x1d, 0xb0, 0x5d, 0x4f, 0xef,
	0x24, 0x9b, 0x88, 0xff, 0xb7, 0xf7, 0x3f, 0xdb, 0xde, 0x72, 0xd4, 0x33, 0xc5, 0xa4, 0x07, 0x56,
	0x46, 0x6d, 0x20, 0x52, 0x19, 0x66, 0x8c, 0x4a, 0x8b, 0x9c, 0x46, 0x91, 0xf4, 0x06, 0xcd, 0x18,
	0x2b, 0x8c, 0xd4, 0x16, 0x96, 0xe0, 0xce, 0x8a, 0x98, 0x4f, 0xb8, 0xd2, 0xf0, 0x63, 0xd0, 0x35,
	0xa7, 0xd7, 0xf2, 0x3b, 0xbb, 0x83, 0xfd, 0x51, 0xf0, 0xd2, 0x53, 0x10, 0xac, 0x30, 0xdc, 0xc0,
	0x12, 0xae, 0x34, 0xb1, 0x2c, 0x88, 0xc0, 0x86, 0x16, 0x9a, 0x26, 0xe5, 0x9f, 0xa2, 0x3f, 0x2f,
	0x90, 0x03, 0x88, 0x3b, 0xf6, 0xff, 0x6a, 0x83, 0x7e, 0x9d, 0x02, 0x7e, 0x04, 0xba, 0xcf, 0x78,
	0x16, 0xc3, 0x7b, 0x81, 0x7b, 0x14, 0x82, 0xea, 0xc5, 0x08, 0x3e, 0x35, 0x2f, 0xc6, 0x70, 0x0d,
	0x0e, 0x3f, 0x01, 0xbd, 0x2f, 0xe9, 0xa5, 0xfd, 0xc6, 0xc3, 0xfb, 0xd7, 0x5a, 0xac, 0x1e, 0x90,
	0xb5, 0xf4, 0x08, 0x0c, 0x2a, 0xfa, 0x29, 0x79, 0x72, 0x53, 0x86, 0xe1, 0x3a, 0x97, 0xca, 0xf1,
	0xe8, 0xfb, 0x5f, 0xff, 0xfc, 0xa1, 0xed, 0xc1, 0x7b, 0xe3, 0xe7, 0x92, 0x6a, 0xa1, 0xf6, 0x4c,
	0xe8, 0x58, 0xd1, 0xcb, 0x6f, 0xa6, 0xb6, 0xb1, 0xef, 0xc0, 0xed, 0xe5, 0x8f, 0x0d, 0xf4, 0xaf,
	0xe5, 0x7a, 0xe9, 0x5b, 0x34, 0xc4, 0x37, 0x4f, 0xdb, 0x4c, 0x18, 0xbf, 0x63, 0xab, 0xbe, 0x01,
	0x91, 0x7d, 0x40, 0xc3, 0x99, 0xd2, 0x22, 0xdd, 0x4b, 0xf8, 0x84, 0x66, 0xf1, 0x38, 0x66, 0x3a,
	0xa4, 0x52, 0x5a, 0xc2, 0xe1, 0xfd, 0x17, 0xbf, 0x8f, 0x6e, 0xbd, 0xb8, 0x1a, 0xb5, 0x7e, 0xb9,
	0x1a, 0xb5, 0x7e, 0xbb, 0x1a, 0xb5, 0x7e, 0xfc, 0x63, 0x74, 0xeb, 0xeb, 0x0e, 0xcd, 0xf9, 0xd9,
	0xa6, 0x9d, 0xc7, 0x87, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x09, 0x8e, 0x1d, 0x5f, 0xf3, 0x07,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CarRecordClient is the client API for CarRecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CarRecordClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	//  rpc UploadCarRecord(UploadCarRecordReq) returns (UploadCarRecordResp) {
	//    option (google.api.http) = {
	//      post: "/api/custom-lifang/uploadrecord"
	//    };
	//  };
	GetCarRecord(ctx context.Context, in *GetCarRecordReq, opts ...grpc.CallOption) (*CarRecordInfoList, error)
}

type carRecordClient struct {
	cc *grpc.ClientConn
}

func NewCarRecordClient(cc *grpc.ClientConn) CarRecordClient {
	return &carRecordClient{cc}
}

func (c *carRecordClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/demo.service.v1.CarRecord/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRecordClient) SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/demo.service.v1.CarRecord/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRecordClient) SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.CarRecord/SayHelloURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carRecordClient) GetCarRecord(ctx context.Context, in *GetCarRecordReq, opts ...grpc.CallOption) (*CarRecordInfoList, error) {
	out := new(CarRecordInfoList)
	err := c.cc.Invoke(ctx, "/demo.service.v1.CarRecord/GetCarRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarRecordServer is the server API for CarRecord service.
type CarRecordServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	SayHello(context.Context, *HelloReq) (*emptypb.Empty, error)
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
	//  rpc UploadCarRecord(UploadCarRecordReq) returns (UploadCarRecordResp) {
	//    option (google.api.http) = {
	//      post: "/api/custom-lifang/uploadrecord"
	//    };
	//  };
	GetCarRecord(context.Context, *GetCarRecordReq) (*CarRecordInfoList, error)
}

// UnimplementedCarRecordServer can be embedded to have forward compatible implementations.
type UnimplementedCarRecordServer struct {
}

func (*UnimplementedCarRecordServer) Ping(ctx context.Context, req *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedCarRecordServer) SayHello(ctx context.Context, req *HelloReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedCarRecordServer) SayHelloURL(ctx context.Context, req *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloURL not implemented")
}
func (*UnimplementedCarRecordServer) GetCarRecord(ctx context.Context, req *GetCarRecordReq) (*CarRecordInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarRecord not implemented")
}

func RegisterCarRecordServer(s *grpc.Server, srv CarRecordServer) {
	s.RegisterService(&_CarRecord_serviceDesc, srv)
}

func _CarRecord_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRecordServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.CarRecord/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRecordServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRecord_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRecordServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.CarRecord/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRecordServer).SayHello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRecord_SayHelloURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRecordServer).SayHelloURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.CarRecord/SayHelloURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRecordServer).SayHelloURL(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarRecord_GetCarRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarRecordServer).GetCarRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.CarRecord/GetCarRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarRecordServer).GetCarRecord(ctx, req.(*GetCarRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CarRecord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.service.v1.CarRecord",
	HandlerType: (*CarRecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _CarRecord_Ping_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _CarRecord_SayHello_Handler,
		},
		{
			MethodName: "SayHelloURL",
			Handler:    _CarRecord_SayHelloURL_Handler,
		},
		{
			MethodName: "GetCarRecord",
			Handler:    _CarRecord_GetCarRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *HelloReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelloResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UploadCarRecordResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadCarRecordResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadCarRecordResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResMsg) > 0 {
		i -= len(m.ResMsg)
		copy(dAtA[i:], m.ResMsg)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ResMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.ResCode != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ResCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UploadCarRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UploadCarRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UploadCarRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ImagePath) > 0 {
		i -= len(m.ImagePath)
		copy(dAtA[i:], m.ImagePath)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImagePath)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ChannelName) > 0 {
		i -= len(m.ChannelName)
		copy(dAtA[i:], m.ChannelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ChannelName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GUID) > 0 {
		i -= len(m.GUID)
		copy(dAtA[i:], m.GUID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GUID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InOrOut) > 0 {
		i -= len(m.InOrOut)
		copy(dAtA[i:], m.InOrOut)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InOrOut)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ParkID) > 0 {
		i -= len(m.ParkID)
		copy(dAtA[i:], m.ParkID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ParkID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PassTime) > 0 {
		i -= len(m.PassTime)
		copy(dAtA[i:], m.PassTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PassTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InTime) > 0 {
		i -= len(m.InTime)
		copy(dAtA[i:], m.InTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InTime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CarCode) > 0 {
		i -= len(m.CarCode)
		copy(dAtA[i:], m.CarCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CarCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCarRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCarRecordReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCarRecordReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ParkID) > 0 {
		i -= len(m.ParkID)
		copy(dAtA[i:], m.ParkID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ParkID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CarCode) > 0 {
		i -= len(m.CarCode)
		copy(dAtA[i:], m.CarCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CarCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PassTime) > 0 {
		i -= len(m.PassTime)
		copy(dAtA[i:], m.PassTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PassTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InTime) > 0 {
		i -= len(m.InTime)
		copy(dAtA[i:], m.InTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InTime)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CarRecordInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CarRecordInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CarRecordInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Stopaddr) > 0 {
		i -= len(m.Stopaddr)
		copy(dAtA[i:], m.Stopaddr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Stopaddr)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Caruser) > 0 {
		i -= len(m.Caruser)
		copy(dAtA[i:], m.Caruser)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Caruser)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ImagePath) > 0 {
		i -= len(m.ImagePath)
		copy(dAtA[i:], m.ImagePath)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ImagePath)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ChannelName) > 0 {
		i -= len(m.ChannelName)
		copy(dAtA[i:], m.ChannelName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ChannelName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ChannelID) > 0 {
		i -= len(m.ChannelID)
		copy(dAtA[i:], m.ChannelID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ChannelID)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GUID) > 0 {
		i -= len(m.GUID)
		copy(dAtA[i:], m.GUID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.GUID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InOrOut) > 0 {
		i -= len(m.InOrOut)
		copy(dAtA[i:], m.InOrOut)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InOrOut)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ParkID) > 0 {
		i -= len(m.ParkID)
		copy(dAtA[i:], m.ParkID)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ParkID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PassTime) > 0 {
		i -= len(m.PassTime)
		copy(dAtA[i:], m.PassTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.PassTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InTime) > 0 {
		i -= len(m.InTime)
		copy(dAtA[i:], m.InTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.InTime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CarCode) > 0 {
		i -= len(m.CarCode)
		copy(dAtA[i:], m.CarCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.CarCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CarRecordInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CarRecordInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CarRecordInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Total != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HelloReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HelloResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadCarRecordResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResCode != 0 {
		n += 1 + sovApi(uint64(m.ResCode))
	}
	l = len(m.ResMsg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UploadCarRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CarCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.InTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PassTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ParkID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.InOrOut)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GUID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ChannelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCarRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovApi(uint64(m.Limit))
	}
	l = len(m.InTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PassTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CarCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ParkID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CarRecordInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CarCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.InTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PassTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ParkID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.InOrOut)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GUID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ChannelID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ChannelName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Caruser)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Stopaddr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CarRecordInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HelloReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadCarRecordResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadCarRecordResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadCarRecordResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResCode", wireType)
			}
			m.ResCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResCode |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadCarRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadCarRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadCarRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParkID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParkID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InOrOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InOrOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCarRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCarRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCarRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParkID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParkID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarRecordInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarRecordInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarRecordInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CarCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CarCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParkID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParkID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InOrOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InOrOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caruser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caruser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stopaddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stopaddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CarRecordInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CarRecordInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CarRecordInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &CarRecordInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
